buildscript {
    ext.corda_release_group = 'net.corda'
    ext.corda_core_release_version = '4.1'
    ext.corda_release_version = '4.1'
    ext.corda_gradle_plugins_version = '4.0.25'
    ext.kotlin_version = '1.3.41'
    ext.junit_version = '4.12'
    ext.quasar_version = '0.7.9'
    ext.spring_boot_version = '2.0.2.RELEASE'
    ext.spring_boot_gradle_plugin_version = '2.0.2.RELEASE'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-dev' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
    flatDir { dirs "${project.rootProject.projectDir}/lib/dependencies" }
}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir "config/dev"
        }
    }
    test {
        resources {
            srcDir "config/test"
        }
    }
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compileClasspath fileTree(dir: "${project.rootProject.projectDir}/lib/dependencies", include: '*.jar')

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"

    compile "org.reflections:reflections:0.9.10"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+"

    // Corda integration dependencies
    cordaCompile "$corda_release_group:corda-core:$corda_core_release_version"
    cordaCompile "$corda_release_group:corda-finance-contracts:$corda_release_version"
    cordaCompile "$corda_release_group:corda-finance-workflows:$corda_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_core_release_version"
    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"

    // CorDapp dependencies
    // Specify your CorDapp's dependencies below, including dependent CorDapps.
    // We've defined Cash as a dependent CorDapp as an example.
    cordapp project(":cordapp")
    cordapp project(":cdm-support")
    cordapp project(":cdm-support-contracts-states")

    cordapp "$corda_release_group:corda-finance-contracts:$corda_release_version"
    cordapp "$corda_release_group:corda-finance-workflows:$corda_release_version"
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
        cordapps = [
                "$project.group:cdm-support-contracts-states:$project.version",
                "$project.group:cdm-support:$project.version",
                "$project.group:cordapp:$project.version",
                "$corda_release_group:corda-finance-contracts:$corda_release_version",
                "$corda_release_group:corda-finance-workflows:$corda_release_version"
        ]
    }
    node {
        name "O=Client1,L=New York,C=US"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        webPort 10007
        cordapps = [
                "$project.group:cdm-support-contracts-states:$project.version",
                "$project.group:cdm-support:$project.version",
                "$project.group:cordapp:$project.version",
                "$corda_release_group:corda-finance-contracts:$corda_release_version",
                "$corda_release_group:corda-finance-workflows:$corda_release_version"
        ]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Broker1,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        webPort 10010
        cordapps = [
                "$project.group:cdm-support-contracts-states:$project.version",
                "$project.group:cdm-support:$project.version",
                "$project.group:cordapp:$project.version",
                "$corda_release_group:corda-finance-contracts:$corda_release_version",
                "$corda_release_group:corda-finance-workflows:$corda_release_version"
        ]
        rpcUsers = [[user: "user2", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Broker2,L=New York,C=US"
        p2pPort 10011
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10052")
        }
        webPort 10013
        cordapps = [
                "$project.group:cdm-support-contracts-states:$project.version",
                "$project.group:cdm-support:$project.version",
                "$project.group:cordapp:$project.version",
                "$corda_release_group:corda-finance-contracts:$corda_release_version",
                "$corda_release_group:corda-finance-workflows:$corda_release_version"
        ]
        rpcUsers = [[user: "user3", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Observery,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10014
        rpcSettings {
            address("localhost:10015")
            adminAddress("localhost:10055")
        }
        cordapps = [
                "$project.group:cdm-support-contracts-states:$project.version",
                "$project.group:cdm-support:$project.version",
                "$project.group:cordapp:$project.version",
                "$corda_release_group:corda-finance-contracts:$corda_release_version",
                "$corda_release_group:corda-finance-workflows:$corda_release_version"
        ]
    }
}

task runTemplateClient(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.derivhack.ClientKt'
    args 'localhost:10006'
}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}
